#!/bin/sh
# ssh-wrapper
# The main job of this wrapper is to load ssh-keys if not loaded
SELF=$(basename $0)

warn() {
    echo "$(tput setaf 1)>$(tput bold)>$(tput sgr0) $1"
}

command -v ssh >/dev/null || {
    echo "$SELF: Original ssh command no found..."
    exit 1
}

# Parse .ssh/config in search of information.
# Let's give an example, let say I have the following .ssh/config
#
#     Host foo
#         User vincent
#         IdentifyFile ~/.ssh/id_rsa
#     Host bar
#         User toto
#         IdentifyFile ~/.ssh/id_rsa
#         #-Option:TERM=xterm
#         #-Option:ENCODING=ISO-8859-15
#     Host foobar
#         User titi
#         #-Option:LANG=C
#         #-Option:LC_MESSAGES=C
#
# If I want to connect to foobar, I want to use LANG=C and LC_MESSAGES=C when
# running ssh (or else). It run eval by default (something like a local export).
# If it contains ENCODING, this will try to run luit if present, and neededâ€¦
host=$1
pre_cmd=""
post_cmd=""
# Then some hacking to get commented line from config file
ssh_config=$(awk 'BEGIN \
    { RS = "Host"; FS = "#" } \
    { \
        if ($1 ~ /'$host'/ && $1 !~ /ProxyCommand(.*)'$host'/) print }' $HOME/.ssh/config)
# ssh_config variable now contains the related Host config present in .ssh/config
for elt in $(echo $ssh_config | grep "#-"); do
    var=$(echo $elt | awk 'BEGIN { FS=":" } { print $2 }')
    if test $(expr "$var" : "ENCODING") -gt 0; then
        # ENCODING is present, let's run luit if present (and needed)
        encoding=$(echo $var | awk 'BEGIN { FS="=" } {print $2}')
        if ! locale | grep -q "$encoding"; then
            # the encoding requested is not the same
            # pre_cmd="luit -p -encoding $encoding" FIXME: -p is not available everywhere... how to test it ?
            pre_cmd="luit -encoding $encoding"
            enc_color="$(tput setaf 5)"
            reset="$(tput sgr0)"
            cenc_color="$(tput setaf 2)"
            warn "Using $(tput sgr 0 1)luit${reset} to convert ${cenc_color}UTF-8${reset} to ${enc_color}$encoding${reset}"
        fi
        continue
    fi
    eval $var
done

$pre_cmd ssh $@

echo "$(tput setaf 2)<$(tput bold)<$(tput sgr0) Back on track (ssh $@)"
